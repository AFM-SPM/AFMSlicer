"""Test the slice module."""

from __future__ import annotations

import numpy as np
import numpy.typing as npt
import pytest

from afmslicer import slicer


@pytest.mark.parametrize(
    ("heights", "slices", "shape", "stacked_mask"),
    [
        pytest.param(
            np.asarray(
                [
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0],
                    [0, 1, 2, 3, 3, 3, 3, 3, 2, 1, 0],
                    [0, 1, 2, 3, 4, 4, 4, 3, 2, 1, 0],
                    [0, 1, 2, 3, 4, 5, 4, 3, 2, 1, 0],
                    [0, 1, 2, 3, 4, 4, 4, 3, 2, 1, 0],
                    [0, 1, 2, 3, 3, 3, 3, 3, 2, 1, 0],
                    [0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0],
                    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ),
            5,
            (11, 11, 5),
            np.asarray(
                [
                    [
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [2, 2, 2, 2, 2],
                        [3, 3, 3, 3, 3],
                        [3, 3, 3, 3, 3],
                        [3, 3, 3, 3, 3],
                        [3, 3, 3, 3, 3],
                        [3, 3, 3, 3, 3],
                        [2, 2, 2, 2, 2],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [2, 2, 2, 2, 2],
                        [3, 3, 3, 3, 3],
                        [4, 4, 4, 4, 4],
                        [4, 4, 4, 4, 4],
                        [4, 4, 4, 4, 4],
                        [3, 3, 3, 3, 3],
                        [2, 2, 2, 2, 2],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [2, 2, 2, 2, 2],
                        [3, 3, 3, 3, 3],
                        [4, 4, 4, 4, 4],
                        [5, 5, 5, 5, 5],
                        [4, 4, 4, 4, 4],
                        [3, 3, 3, 3, 3],
                        [2, 2, 2, 2, 2],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [2, 2, 2, 2, 2],
                        [3, 3, 3, 3, 3],
                        [4, 4, 4, 4, 4],
                        [4, 4, 4, 4, 4],
                        [4, 4, 4, 4, 4],
                        [3, 3, 3, 3, 3],
                        [2, 2, 2, 2, 2],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [2, 2, 2, 2, 2],
                        [3, 3, 3, 3, 3],
                        [3, 3, 3, 3, 3],
                        [3, 3, 3, 3, 3],
                        [3, 3, 3, 3, 3],
                        [3, 3, 3, 3, 3],
                        [2, 2, 2, 2, 2],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                    ],
                ]
            ),
            id="simple",
        ),
    ],
)
def test_slicer(
    heights: npt.NDArray, slices: int, shape: tuple[int], stacked_mask: npt.NDArray
) -> None:
    """Test for slicer() function."""
    sliced_mask = slicer.slicer(heights=heights, slices=slices)
    assert sliced_mask.shape == shape
    np.testing.assert_array_equal(sliced_mask, stacked_mask)


@pytest.mark.parametrize(
    ("sliced_array", "slices", "min_height", "max_height", "sliced_mask"),
    [
        pytest.param(
            np.asarray(
                [
                    [
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [2, 2, 2, 2, 2],
                        [3, 3, 3, 3, 3],
                        [3, 3, 3, 3, 3],
                        [3, 3, 3, 3, 3],
                        [3, 3, 3, 3, 3],
                        [3, 3, 3, 3, 3],
                        [2, 2, 2, 2, 2],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [2, 2, 2, 2, 2],
                        [3, 3, 3, 3, 3],
                        [4, 4, 4, 4, 4],
                        [4, 4, 4, 4, 4],
                        [4, 4, 4, 4, 4],
                        [3, 3, 3, 3, 3],
                        [2, 2, 2, 2, 2],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [2, 2, 2, 2, 2],
                        [3, 3, 3, 3, 3],
                        [4, 4, 4, 4, 4],
                        [5, 5, 5, 5, 5],
                        [4, 4, 4, 4, 4],
                        [3, 3, 3, 3, 3],
                        [2, 2, 2, 2, 2],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [2, 2, 2, 2, 2],
                        [3, 3, 3, 3, 3],
                        [4, 4, 4, 4, 4],
                        [4, 4, 4, 4, 4],
                        [4, 4, 4, 4, 4],
                        [3, 3, 3, 3, 3],
                        [2, 2, 2, 2, 2],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [2, 2, 2, 2, 2],
                        [3, 3, 3, 3, 3],
                        [3, 3, 3, 3, 3],
                        [3, 3, 3, 3, 3],
                        [3, 3, 3, 3, 3],
                        [3, 3, 3, 3, 3],
                        [2, 2, 2, 2, 2],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [2, 2, 2, 2, 2],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 1],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                    ],
                ]
            ),
            None,
            None,
            None,
            np.asarray(
                [
                    [
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 1, 1, 0, 0],
                        [1, 1, 1, 0, 0],
                        [1, 1, 1, 0, 0],
                        [1, 1, 1, 0, 0],
                        [1, 1, 1, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 1, 1, 0, 0],
                        [1, 1, 1, 1, 0],
                        [1, 1, 1, 1, 0],
                        [1, 1, 1, 1, 0],
                        [1, 1, 1, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 1, 1, 0, 0],
                        [1, 1, 1, 1, 0],
                        [1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 0],
                        [1, 1, 1, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 1, 1, 0, 0],
                        [1, 1, 1, 1, 0],
                        [1, 1, 1, 1, 0],
                        [1, 1, 1, 1, 0],
                        [1, 1, 1, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 1, 1, 0, 0],
                        [1, 1, 1, 0, 0],
                        [1, 1, 1, 0, 0],
                        [1, 1, 1, 0, 0],
                        [1, 1, 1, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 1, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                    ],
                    [
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0],
                    ],
                ]
            ),
            id="simple array, no slices/min/max",
        ),
    ],
)
def test_mask_slices(
    sliced_array: npt.NDArray[np.int8],
    slices: int,
    min_height: float,
    max_height: float,
    sliced_mask: npt.NDArray[np.int8],
) -> None:
    """Test for mask_slices()."""
    masked_slices = slicer.mask_slices(
        sliced_array=sliced_array,
        slices=slices,
        min_height=min_height,
        max_height=max_height,
    )
    np.testing.assert_array_equal(masked_slices, sliced_mask)
