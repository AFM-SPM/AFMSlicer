[build-system]
requires = ["setuptools>=77", "setuptools_scm[toml]>=7"]
build-backend = "setuptools.build_meta"


[project]
name = "AFMSlicer"
authors = [
  { name = "Neil Shephard", email = "n.shephard@sheffield.ac.uk" },
]
description = "Package for slicing AFM images."
readme = "README.md"
license = "GPL-3.0-or-later"
license-files = ["COPYING.md"]
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
dynamic = ["version"]
dependencies = [
  "afmreader @ git+https://github.com/AFM-SPM/AFMReader@main",
  "art",
  "TopoStats",
  "loguru",
  "schema",
  "tqdm",
]

[project.urls]
Homepage = "https://github.com/ns-rse/AFMSlicer"
"Bug Tracker" = "https://github.com/ns-rse/AFMSlicer/issues"
Discussions = "https://github.com/ns-rse/AFMSlicer/discussions"
Changelog = "https://github.com/ns-rse/AFMSlicer/releases"


[project.optional-dependencies]
tests = [
  "pytest",
  "pytest-cov",
  "syrupy",
]
dev = [
  "afmslicer[tests]",
  "black",
  "codespell",
  "ipdb",
  "numpydoc",
  "pre-commit",
  "pydocstyle[toml]",
  "pylint",
  "pytest-testmon",
  "ruff",
  "tomli",
]
docs = [
  "mkdocs",
  "mkdocs-material",
  "mkdocs-mermaid2-plugin",
  "mkdocstrings[python]",
]


[tool.setuptools_scm]
write_to = "src/afmslicer/_version.py"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]


[tool.coverage]
run.source = ["afmslicer"]
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["src", "tests"]
python_version = "3.10"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "afmslicer.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]

[tool.ruff.lint]
extend-select = [
  "ARG",      # flake8-unused-arguments
  "B",        # flake8-bugbear
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "EXE",      # flake8-executable
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventions
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "G004",     # Logging statement uses f-string
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["afmslicer._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.9"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "missing-function-docstring",
  "wrong-import-position",
]

[tool.numpydoc_validation]
checks = [
  "all", # Perform all check except those listed below
  "ES01",
  "EX01",
  "PR10", # Conflicts with black formatting
  "SA01",
]
exclude = [  # don't report on objects that match any of these regex
    "\\.undocumented_method$",
    "\\.__repr__$",
    "^test_",
    "^conftest",
    "^conf$",
    "noxfile*"
]
override_SS05 = [  # override SS05 to allow docstrings starting with these words
    "^Process ",
    "^Assess ",
    "^Access ",
]

[tool.codespell]
skip = '*.spm*,*.mplstyle,*.svg,*.stp,*.top,*.002,*.004,uv.lock'
count = ''
quiet-level = 3
ignore-words-list = 'OT'

[project.scripts]
afmslicer = "afmslicer.entry_point:entry_point"
